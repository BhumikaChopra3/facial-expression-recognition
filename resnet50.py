# -*- coding: utf-8 -*-
"""ResNet50.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AEXmvzgo_Eld31wzjhaVFOVAYTdJRor3
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

# Load ResNet50 model
pretrained_model = tf.keras.applications.ResNet50(weights='imagenet')

# Preprocess function for ResNet50
def preprocess(image):
    image = tf.image.resize(image, (224, 224))
    image = tf.keras.applications.resnet50.preprocess_input(image)
    image = image[None, ...]
    return image

# Helper functions
decode_predictions = tf.keras.applications.resnet50.decode_predictions

def get_imagenet_label(probs):
    return decode_predictions(probs, top=1)[0][0]

def display_images(image, description):
    _, label, confidence = get_imagenet_label(pretrained_model.predict(image))
    plt.figure()
    plt.imshow(image[0] * 0.5 + 0.5)
    plt.title('{} \n {} : {:.2f}% Confidence'.format(description, label, confidence * 100))
    plt.show()

# Define loss function
loss_object = tf.keras.losses.CategoricalCrossentropy()

from PIL import Image

# Replace 'your_image_path.jpg' with the path to your local image file
local_image_path = '/content/dog.jpg'

# Load the image using PIL (Python Imaging Library)
image = Image.open(local_image_path)
image = np.array(image)  # Convert PIL image to NumPy array

# Process the image using the existing preprocess function
image = preprocess(image)
image_probs = pretrained_model.predict(image)

# Adversarial example generation function
def create_adversarial_pattern(input_image, input_label):
    with tf.GradientTape() as tape:
        tape.watch(input_image)
        prediction = pretrained_model(input_image)
        loss = loss_object(input_label, prediction)
    gradient = tape.gradient(loss, input_image)
    signed_grad = tf.sign(gradient)
    return signed_grad

labrador_retriever_index = 208
label = tf.one_hot(labrador_retriever_index, image_probs.shape[-1])
label = tf.reshape(label, (1, image_probs.shape[-1]))

perturbations_ = create_adversarial_pattern(image, label)
perturbations = perturbations_[0] * 0.75 + 0.5

# Display perturbations
plt.imshow(perturbations)
plt.title('adversarial_perturbation')
plt.show()

# Generate adversarial examples for different epsilon values
epsilons = [0, 0.1, 0.3, 0.55]
descriptions = [('Epsilon = {:0.3f}'.format(eps) if eps else 'Input') for eps in epsilons]

for i, eps in enumerate(epsilons):
    adv_x = image + eps * perturbations
    adv_x = tf.clip_by_value(adv_x, -1, 1)
    display_images(adv_x, descriptions[i])